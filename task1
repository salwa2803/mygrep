#!/bin/bash

# mygrep.sh - A simple grep clone

# Show help info
if [[ "$1" == "--help" ]]; then
  echo "Usage: $0 [options] <search_string> <filename>"
  echo "Options:"
  echo "  -n    Show line numbers"
  echo "  -v    Invert match (print non-matching lines)"
  exit 0
fi

# Make sure at least 2 arguments are provided
if [ $# -lt 2 ]; then
  echo "Usage: $0 [options] <search_string> <filename>"
  exit 1
fi

# Default values
show_line_numbers=false
invert_match=false

# Collect options
while getopts "nv" opt; do
  case $opt in
    n) show_line_numbers=true ;;
    v) invert_match=true ;;
    *) 
      echo "Invalid option: -$OPTARG" 
      exit 1
      ;;
  esac
done

# Shift processed options
shift $((OPTIND-1))

# After options, expect search string and filename
search_string="$1"
file="$2"

# Check if both search string and file are given
if [ -z "$search_string" ] || [ -z "$file" ]; then
  echo "Error: Missing search string or filename."
  echo "Usage: $0 [options] <search_string> <filename>"
  exit 1
fi

# Check if the file exists
if [ ! -f "$file" ]; then
  echo "Error: File '$file' not found."
  exit 1
fi

# Search through the file
line_number=0
while IFS= read -r line
do
  line_number=$((line_number + 1))
  # Case-insensitive match
  if echo "$line" | grep -iq "$search_string"; then
    match=true
  else
    match=false
  fi

  if $invert_match; then
    match=$( [ "$match" = false ] && echo true || echo false )
  fi

  if [ "$match" = true ]; then
    if $show_line_numbers; then
      echo "${line_number}:$line"
    else
      echo "$line"
    fi
  fi
done < "$file"
